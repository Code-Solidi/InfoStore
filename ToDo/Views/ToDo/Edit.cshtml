@using ToDos.Code;
@using Microsoft.AspNetCore.Html;
@model ToDos.Models.ToDoModel

<form asp-action="Edit" class="container">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <input id="time-unit" type="hidden" asp-for="TimeUnit" />
    <input type="hidden" asp-for="Id" />

    <div class="form-group row mb-3">
        <label asp-for="DueDateTime" class="col-form-label col-md-2">To Do:</label>
        <div class="col-md-10">
            <input type="text" class="form-control" readonly asp-for="Text" />
        </div>
    </div>

    <div class="form-group row mb-3">
        <label asp-for="DueDateTime" class="col-form-label col-md-2">Due Date &amp; Time:</label>
        <div class="col-md-10">
            <input asp-for="DueDateTime" class="form-control" asp-format="{0:yyyy-MM-ddTHH:mm}" value="@this.GetDueDateAndTime(this.Model)" />
            <span asp-validation-for="DueDateTime" class="text-danger"></span>
        </div>
    </div>

    <div class="form-group row mb-3">
        <label asp-for="EMail" class="col-form-label col-md-2">Send a reminder to:</label>
        <div class="col-md-10">
            <input asp-for="EMail" class="form-control col-md-10" placeholder="EMail address" />
            <span asp-validation-for="EMail" class="text-danger"></span>
        </div>
    </div>

    <div class="form-group row mb-3">
        <div class="col-md-1 col-md-sm-3 col-md-xs-4 offset-md-2">
            <input asp-for="Remind" class="form-control text-end me-1" />
            <span asp-validation-for="Remind" class="text-danger"></span>
        </div>

        <div class="col-md-3">
            <div class="dropdown">
                <button id="dropdownTimeUnit" type="button" class="btn btn-outline-secondary dropdown-toggle ps-3" style="vertical-align:unset" data-bs-toggle="dropdown" data-bs-todo-id="@this.Model.Id" aria-expanded="false">
                    @{
                        <text>@(this.Model.TimeUnit == TimeUnit.None ? "Select" : this.Model.TimeUnit)</text>
                    }
                </button>
                <ul class="dropdown-menu" aria-labelledby="dropdownTimeUnit">
                    @{
                        foreach (var unit in this.GetTimeUnitNames())
                        {
                            <li><a class="dropdown-item" href="#">@unit</a></li>
                        }
                    }
                </ul>
                <label class="col-form-label ps-1">before.</label>
            </div>
        </div>
    </div>

    <div class="form-group row">
        <label class="col-form-label col-md-2">Then repeat it every: </label>
        <div class="col-md-1">
            <input asp-for="Repeat" class="form-control text-end" />
        </div>
        <label id="label-time-units" class="col-form-label col-md-7 ms-1"></label>
    </div>
    <div class="form-group row mb-3">
        <div class="col-md-10 offset-2">
            <span asp-validation-for="Repeat" class="text-danger"></span>
        </div>
    </div>

    <div class="form-group row">
        <hr />
        <div class="col-md-10 offset-md-2">
            <input type="submit" value="Update" class="btn btn-primary" />
            <a asp-controller="ToDo" asp-action="Index" class="btn btn-secondary">Go&nbsp;Back</a>
        </div>
    </div>
</form>

@section Styles {
    <style>
        .dropdown button {
            padding-top: 6px;
            padding-bottom: 6px;
        }
    </style>
}

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        $('a.dropdown-item').on('click', function (e) {
            e.preventDefault();
            var units = $(this).text();
            var parent = $(this).closest('div.dropdown');
            $('.dropdown-toggle', parent).text(units);
            $('#label-time-units').text(units);
            $('input#time-unit').val(units);
        });

        $('input#time-unit').on('change', function (e) {
            e.preventDefault();
            alert('changed!');
        });
    </script>
}

@functions {
    IEnumerable<string> GetTimeUnitNames()
    {
        return Enum.GetNames(typeof(TimeUnit)).Skip(1);
    }

    IHtmlContent GetDueDateAndTime(ToDoModel model)
    {
        var result = (model.DueDateTime == DateTime.MinValue ? DateTime.Now : model.DueDateTime).NoSeconds();
        return new HtmlString(result.ToString("s"));
    }
}

