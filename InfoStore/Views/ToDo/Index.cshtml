@using InfoStore.Code;
@using Microsoft.AspNetCore.Html;
@using System.Text;
@model ToDoIndexModel

@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">To Do's</h1>
    <p>&mdash;&nbsp;Never loose what you want to do again&nbsp;&mdash;</p>
</div>

<form asp-action="Index">
    <div class="form-group row mb-3">
        <div class="col-11">
            <input asp-for="Text" class="form-control" placeholder="Enter todo's text" />
            <span asp-validation-for="Text" class="text-danger"></span>
        </div>
        <div class="col-1">
            <div class="d-grid">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </div>
    </div>
</form>

<table class="table table-borderless table-sm">
    <thead>
        <tr>
            <th scope="col" class="em-4">Actions</th>
            <th scope="col">To Do</th>
            <th scope="col" class="em-4">Status</th>
        </tr>
    </thead>
    <tbody>
        @{
            var todos = this.Model.GetToDos();
            for (var index = 0; index < todos.Count(); index++)
            {
                var item = todos[index];
                var isOverdue = item.DueDateTime != DateTime.MinValue && item.DueDateTime < DateTime.Now.NoSeconds() && !item.Done;
                var overdue = isOverdue ? "text-danger" : string.Empty;
                <tr>
                    <td class="text-center">
                        <a href="#" title="View details" class="text-center" data-bs-toggle="collapse" data-bs-target="#collapse-@index" aria-expanded="false" aria-controls="collapse-@index">
                            <i class="bi bi-arrow-clockwise"></i>
                        </a>
                    </td>
                    <td>
                        <span class="truncate @overdue">
                            @item.Text
                        </span>
                    </td>
                    <td>

                        <div class="form-check" style="display: flex; justify-content: center">
                            <input class="form-check-input" asp-for="@item.Done" data-item-id="@item.Id">
                        </div>
                    </td>
                </tr>
                <tr>
                    <td colspan="3" class="p-0">
                        <div class="collapse" id="collapse-@index">
                            @if (item.DueDateTime == default)
                            {
                                <div class="card">
                                    <div class="card-body mt-3">
                                        No due date and time set.
                                    </div>
                                    <div class="card-footer">
                                        <a class="btn btn-primary" href="/ToDo/Edit/@item.Id">Deadline</a>
                                        <a class="btn btn-danger" href="#" data-bs-toggle="modal" data-bs-target="#confirmDeleteleModal" data-item-id="@item.Id">Delete</a>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="card">
                                    <div class="card-body mt-3">
                                        @this.DeadlineAndReminderText(item)
                                    </div>
                                    <div class="card-footer">
                                        <a class="btn btn-primary" href="/ToDo/Edit/@item.Id">Modify</a>
                                        <a class="btn btn-danger" href="#" data-bs-toggle="modal" data-bs-target="#confirmDeleteleModal" data-item-id="@item.Id">Delete</a>
                                    </div>
                                </div>
                            }
                        </div>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

<div class="modal fade" id="confirmDeleteleModal" tabindex="-1" aria-labelledby="confirmDeleteleModalLabel" data-bs-backdrop="static" data-bs-keyboard="false" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header text-danger">
                <h5 class="modal-title" id="confirmDeleteleModalLabel">Please, confirm</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Do you want to delete this item? The operation is irevertible.
            </div>
            <div class="modal-footer">
                <button type="button" id="btn-delete" class="btn btn-danger" data-bs-dismiss="modal">Yes</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No</button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .card-body {
            margin-top: 0;
            margin-bottom: 0;
            padding-top: 0;
        }

        form#deadline-form .input-group {
            align-items: center;
        }

        .accordion-body {
            padding-right: 1px;
        }

    </style>
}

@section Scripts {
    <script>
        $('#confirmDeleteleModal').on('show.bs.modal', function (e) {
            var button = e.relatedTarget;
            var id = $(button).attr('data-item-id');
            $('#btn-delete', this).attr('data-item-id', id);
        });

        $('td a').on('click', function () {
            $('i', this).toggleClass('bi-arrow-counterclockwise');
            $('i', this).toggleClass('bi-arrow-clockwise');
        });

        $('#btn-delete').on('click', function () {
            var id = $(this).attr('data-item-id');
            $.post('/todo/delete/' + id, function () {
                window.location.href = '/todo/index';
            });
        });

        $('input[type="checkbox"]').on('change', function(e) {
            e.preventDefault();
            var id = $(this).attr('data-item-id');
            $.post('/todo/check/' + id, { checked: this.checked }, function () {
                window.location.href = '/todo/index';
            });
        });
    </script>
}

@functions {
    IHtmlContent GetTimeUnit(TimeUnit timeUnit, uint before)
    {
        var name = Enum.GetName(typeof(TimeUnit), timeUnit).ToLower();
        return new HtmlString(before == 1 ? name : name[..(name.Length - 1)]);
    }

    IHtmlContent DeadlineAndReminderText(ToDoModel item)
    {
        var mhd = $"{item.TimeUnit}".ToLower();
        var builder = new StringBuilder($"Deadline set to <strong>{item.DueDateTime}</strong>. ");

        var now = DateTime.Now.NoSeconds();
        var remind = now;
        switch (item.TimeUnit)
        {
            case TimeUnit.Days:
                remind.AddDays(-item.Remind);
                break;

            case TimeUnit.Hours:
                remind.AddHours(-item.Remind);
                break;

            case TimeUnit.Minutes:
                remind.AddMinutes(-item.Remind);
                break;

            default:    
                remind.AddMinutes(-5);  // default time before deadline when no reminder set
                break;
        }

        if (item.DueDateTime >= remind && item.DueDateTime <= now && !item.Done)
        {
            if (item.Remind != 0)
            {
                builder.Append($"A reminder will be sent to '{item.EMail}' {item.Remind} {mhd} before the deadline is reached. ");
            }

            var diff = remind - item.DueDateTime;
            var days = diff.Days;
            var hours = diff.Hours;
            var minutes = diff.Minutes;

            var daysText = days != 1 ? "days" : "day";
            var hoursText = hours != 1 ? "hours" : "hour";
            var minutesText = minutes != 1 ? "minutes" : "minute";

            var overdue = string.Empty;
            if (days != 0)
            {
                overdue = $"{days} {daysText}, {hours} {hoursText}, {minutes} {minutesText}";
            }
            else if (hours != 0)
            {
                overdue = $"{hours} {hoursText}, {minutes} {minutesText}";
            }
            else
            {
                overdue = $"{minutes} {minutesText}";
            }

            builder.Append($"Overdue {overdue}.");
        }
        
        if (item.Done)
        {
            builder.Append($" Done!");
        }

        if (item.Notified != 0)
        {
            builder.Append($" Recipient has been notified {item.Notified} time(s).");
        }

        var text = builder.ToString();

        return new HtmlString(text);
    }

}